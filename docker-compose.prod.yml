services:
  # Backend Service (Node.js/Express)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    restart: always
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    volumes:
      - uploads-data:/app/public/uploads
    env_file:
      - ./.env
    environment:
      # Connection string for MongoDB with authentication
      - MONGO_URI=mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongo:27017/${MONGO_DATABASE}?authSource=admin
      - PORT=${BACKEND_PORT}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${BACKEND_PORT}/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    depends_on:
      - mongo
    networks:
      - ecom-network

  # Frontend Service (Next.js Production)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - NEXT_PUBLIC_API_URL=${BACKEND_URL}/api/v1
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    environment:
      - NEXT_PUBLIC_API_URL=${BACKEND_URL}/api/v1
    depends_on:
      - backend
    networks:
      - ecom-network

  # MongoDB Service
  mongo:
    image: mongo:latest
    # Remove public port exposure - only accessible within Docker network
    # ports:
    #   - "${MONGO_PORT}:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DATABASE}
    volumes:
      # Persist database data
      - pf-se-cs-mongo-data:/data/db
      # MongoDB initialization script
      - ./mongo-init:/docker-entrypoint-initdb.d
    networks:
      - ecom-network
    restart: always

# Define the network
networks:
  ecom-network:
    driver: bridge

# Define the volume for MongoDB data persistence
volumes:
  pf-se-cs-mongo-data:
    external: true
  uploads-data:
